head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @@;


1.2
date     93.01.26.10.13.16;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     93.01.26.10.13.01;  author bin;  state Exp;
branches ;
next     ;


desc
@steve 1/26/93
Initial MWC RCS revision.
@


1.2
log
@steve 1/26/93
Changes from hal to implement both ait() and waitpid().
@
text
@//////////
/ libc/sys/i386/wait.s
/ wait(), waitpid().
/ Both are system call #7.
/ waitpid() is designated by setting all of PSW flags ZF, PF, SF, and OF.
//////////

	.text
	.globl	wait
	.globl	waitpid
	.globl	.cerror

	.set	WPMASK,0x8C4	/ set (ZF|PF|SF|OF) for waitpid()
	
//////////
/ int
/ wait(int * stat_loc)
//////////

wait:
	pushfl			/ get psw
	popl	%eax
	andl	$~WPMASK,%eax	/ set PSW for wait()
	pushl	%eax
	popfl
	movl	$7,%eax		/ system call # to %eax
	lcall	$7,$0
	jc	.cerror
	movl	4(%esp),%ecx	/ get statloc to %ecx
	jmp	done		/ and do wrap-up
	
//////////
/ int
/ waitpid(pid_t pid, int * stat_loc, int options)
//////////

waitpid:
	pushfl			/ get psw
	popl	%eax
	orl	$WPMASK,%eax	/ set PSW for waitpid()
	pushl	%eax
	popfl
	movl	$7,%eax		/ system call # to %eax
	lcall	$7,$0
	jc	.cerror
	movl	8(%esp),%ecx	/ get statloc to %ecx
done:
	orl	%ecx,%ecx	/ is statloc null?
	jz	?L0		/ if null, return
	movl	%edx,(%ecx)	/ if non-null, store thru the pointer
?L0:
	ret

/ end of libc/sys/i386/wait.s
@


1.1
log
@Initial revision
@
text
@d3 3
a5 1
/ Copyright (c) Ciaran O'Donnell, Bievres (FRANCE), 1991.
d8 7
d17 1
a17 1
/ wait(statusp) int *statusp;
a19 4
        .text
	.globl	wait
	.globl	.cerror

d21 7
a27 2
	movl	$7,%eax
	lcall	$0x7,$0
d29 7
d37 15
a51 5
	movl	4(%esp), %ecx
	orl	%ecx,%ecx
	je	?L1
	movl	%edx,(%ecx)
?L1:
@
